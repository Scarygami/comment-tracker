<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Proxied Hangout" height="200" width="550">
    <Require feature="dynamic-height"/>
    <Require feature="rpc"/>
    <Require feature="views" />
  </ModulePrefs>
  <Content type="html"><![CDATA[
  <!DOCTYPE html>

  <style type="text/css">
  html {
      width: 100%;
      height: 100%;
      min-height: inherit;
      min-width: inherit;
  }
  body {
      width: 100%;
      height: 100%;
      min-height: inherit;
      min-width: inherit;
  }
  </style>

  <script>

      var token = "NONE";

      function relayMessages() {
	  // this function is called for all cross-domain calls: from
	  // the container to the hangout IFRAME and from the child
	  // IFRAME to the hangout IFRAME

	  var sendToId;
    	  if (this['f'] == "..") {
    	      // "this" is bound to an object that contains the full request.

    	      // "f" == ".." means that the message is coming from the
    	      // top-level window, eg the hangout itself.  This is the
    	      // scenario where you want to pass the message to the
    	      // child IFRAME.
    	      sendToId = "googleplus_target";
    	  } else {
    	      sendToId = "..";  // otherwise the message is coming from the child IFRAME. Relay it to parent = ".."
    	  }
    	  var rpcArgs = [
    	      sendToId,   // the place you want to send the message
    	      this["s"],     // the service name of the originating request
    	      null            // the callback method, not used here.
    	  ].concat(this["a"]);  // the arguments originally passed to the service.

    	  // At this point you're in the hangout IFRAME and you have
    	  // intercepted a request in either direction.

    	  // Send it along to its intended recipient. Eg. if the child
    	  // IFRAME sent a message, we'd be sending to ".." here with
    	  // the same service name and arguments. The child IFRAME
    	  // would send this by using the hangout.js lib as normal.
    	  gadgets.rpc.call.apply(gadgets.rpc, rpcArgs);
      }

      function createiframe() {
    	  // This builds the inner IFRAME that exists in the desired domain
    	  var ifrm = document.createElement("IFRAME");
    	  var gd = gadgets.views.getParams()['appData'];
    	  var ifrm_id = "googleplus_target";
    	  ifrm.setAttribute("src", "YOUR_SERVER_URL/hangout.html" + "?parent="
    	 		    + encodeURIComponent(window.location.href)
    	 		    + "&token=" + encodeURIComponent(token)
    	 		    + "&gd=" + encodeURIComponent(gd));
    	  ifrm.style.width = "100\%";
        ifrm.style.height = "100\%";
        ifrm.style.minHeight = "inherit";
        ifrm.style.minWidth = "inherit";


    	  ifrm.setAttribute("id", ifrm_id);
    	  ifrm.setAttribute("name", ifrm_id);
    	  ifrm.setAttribute("scrolling","auto");
    	  ifrm.setAttribute("frameborder","0");
    	  ifrm.setAttribute("border","0");
    	  document.body.appendChild(ifrm);

    	  // This allows us to receive RPCs from the new IFRAME
    	  gadgets.rpc.setupReceiver(ifrm_id);

      }

      function handleAuthResult(authResult) {
          var authorizeButton = document.getElementById('authorize-button');
          var tokenButton = document.getElementById('token-button');

          if (authResult) {
              token = gapi.auth.getToken().access_token;
              createiframe();

          } else {
              console.log("FAILED AUTH RESULT: " + authResult);
          }
      }

      /** Run authorization call in either with or without popup
       * @param {boolean} isImmediate Use immedate mode for authorization.
       */

      // Lay out the hangout scopes here.
      var scopes = ['https://www.googleapis.com/auth/plus.me',
                    'https://www.googleapis.com/auth/hangout.av',
                    'https://www.googleapis.com/auth/hangout.participants'
		     ];
      function checkAuth(isImmediate) {
          console.log('checking auth');

          // Pass in a null client id; the gadget container will replace this
          // with a generated one.
          // HOWEVER!  You must go through the process of creating a client id
          // associated with this hangout app in the Google API console.
          gapi.auth.authorize({client_id: null,
                               scope: scopes,
                               immediate: isImmediate},
			      handleAuthResult);
      }


      /** Called when jsclient has fully loaded; sets API key */
      function onClientReady() {
        console.log("On client ready...");
    	  gadgets.rpc.registerDefault(relayMessages);
        window.setTimeout(function() { checkAuth(true) }, 1);
      }

  </script>
  <script src="https://apis.google.com/js/client.js?onload=onClientReady"></script>

  ]]></Content>
</Module>